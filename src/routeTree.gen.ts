/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as UpcomingRouteImport } from './routes/upcoming'
import { Route as TodayRouteImport } from './routes/today'
import { Route as InboxRouteImport } from './routes/inbox'
import { Route as IndexRouteImport } from './routes/index'
import { Route as CollectionsCollectionIdRouteImport } from './routes/collections.$collectionId'

const UpcomingRoute = UpcomingRouteImport.update({
  id: '/upcoming',
  path: '/upcoming',
  getParentRoute: () => rootRouteImport,
} as any)
const TodayRoute = TodayRouteImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => rootRouteImport,
} as any)
const InboxRoute = InboxRouteImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const CollectionsCollectionIdRoute = CollectionsCollectionIdRouteImport.update({
  id: '/collections/$collectionId',
  path: '/collections/$collectionId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inbox': typeof InboxRoute
  '/today': typeof TodayRoute
  '/upcoming': typeof UpcomingRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/inbox': typeof InboxRoute
  '/today': typeof TodayRoute
  '/upcoming': typeof UpcomingRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/inbox': typeof InboxRoute
  '/today': typeof TodayRoute
  '/upcoming': typeof UpcomingRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/inbox'
    | '/today'
    | '/upcoming'
    | '/collections/$collectionId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/inbox' | '/today' | '/upcoming' | '/collections/$collectionId'
  id:
    | '__root__'
    | '/'
    | '/inbox'
    | '/today'
    | '/upcoming'
    | '/collections/$collectionId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InboxRoute: typeof InboxRoute
  TodayRoute: typeof TodayRoute
  UpcomingRoute: typeof UpcomingRoute
  CollectionsCollectionIdRoute: typeof CollectionsCollectionIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/upcoming': {
      id: '/upcoming'
      path: '/upcoming'
      fullPath: '/upcoming'
      preLoaderRoute: typeof UpcomingRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/today': {
      id: '/today'
      path: '/today'
      fullPath: '/today'
      preLoaderRoute: typeof TodayRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/inbox': {
      id: '/inbox'
      path: '/inbox'
      fullPath: '/inbox'
      preLoaderRoute: typeof InboxRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/collections/$collectionId': {
      id: '/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof CollectionsCollectionIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InboxRoute: InboxRoute,
  TodayRoute: TodayRoute,
  UpcomingRoute: UpcomingRoute,
  CollectionsCollectionIdRoute: CollectionsCollectionIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
