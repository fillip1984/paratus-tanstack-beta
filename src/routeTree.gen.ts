/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as UpcomingImport } from './routes/upcoming'
import { Route as TodayImport } from './routes/today'
import { Route as InboxImport } from './routes/inbox'
import { Route as IndexImport } from './routes/index'
import { Route as CollectionsCollectionIdImport } from './routes/collections.$collectionId'

// Create/Update Routes

const UpcomingRoute = UpcomingImport.update({
  id: '/upcoming',
  path: '/upcoming',
  getParentRoute: () => rootRoute,
} as any)

const TodayRoute = TodayImport.update({
  id: '/today',
  path: '/today',
  getParentRoute: () => rootRoute,
} as any)

const InboxRoute = InboxImport.update({
  id: '/inbox',
  path: '/inbox',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CollectionsCollectionIdRoute = CollectionsCollectionIdImport.update({
  id: '/collections/$collectionId',
  path: '/collections/$collectionId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/inbox': {
      id: '/inbox'
      path: '/inbox'
      fullPath: '/inbox'
      preLoaderRoute: typeof InboxImport
      parentRoute: typeof rootRoute
    }
    '/today': {
      id: '/today'
      path: '/today'
      fullPath: '/today'
      preLoaderRoute: typeof TodayImport
      parentRoute: typeof rootRoute
    }
    '/upcoming': {
      id: '/upcoming'
      path: '/upcoming'
      fullPath: '/upcoming'
      preLoaderRoute: typeof UpcomingImport
      parentRoute: typeof rootRoute
    }
    '/collections/$collectionId': {
      id: '/collections/$collectionId'
      path: '/collections/$collectionId'
      fullPath: '/collections/$collectionId'
      preLoaderRoute: typeof CollectionsCollectionIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/inbox': typeof InboxRoute
  '/today': typeof TodayRoute
  '/upcoming': typeof UpcomingRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/inbox': typeof InboxRoute
  '/today': typeof TodayRoute
  '/upcoming': typeof UpcomingRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/inbox': typeof InboxRoute
  '/today': typeof TodayRoute
  '/upcoming': typeof UpcomingRoute
  '/collections/$collectionId': typeof CollectionsCollectionIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/inbox'
    | '/today'
    | '/upcoming'
    | '/collections/$collectionId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/inbox' | '/today' | '/upcoming' | '/collections/$collectionId'
  id:
    | '__root__'
    | '/'
    | '/inbox'
    | '/today'
    | '/upcoming'
    | '/collections/$collectionId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  InboxRoute: typeof InboxRoute
  TodayRoute: typeof TodayRoute
  UpcomingRoute: typeof UpcomingRoute
  CollectionsCollectionIdRoute: typeof CollectionsCollectionIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  InboxRoute: InboxRoute,
  TodayRoute: TodayRoute,
  UpcomingRoute: UpcomingRoute,
  CollectionsCollectionIdRoute: CollectionsCollectionIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/inbox",
        "/today",
        "/upcoming",
        "/collections/$collectionId"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/inbox": {
      "filePath": "inbox.tsx"
    },
    "/today": {
      "filePath": "today.tsx"
    },
    "/upcoming": {
      "filePath": "upcoming.tsx"
    },
    "/collections/$collectionId": {
      "filePath": "collections.$collectionId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
