// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Collection {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  position Int

  parent   Collection?  @relation("CollectionRelations", fields: [parentId], references: [id])
  parentId String?
  children Collection[] @relation("CollectionRelations")

  sections Section[]
}

model Section {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  position Int

  tasks Task[]

  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String
}

model Task {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text        String
  description String?
  complete    Boolean         @default(false)
  position    Int
  dueDate     DateTime?
  priority    PriorityOption?

  section   Section @relation(fields: [sectionId], references: [id], onDelete: Cascade)
  sectionId String

  comments Comment[]

  parent   Task?   @relation("TaskRelations", fields: [parentId], references: [id])
  parentId String?
  children Task[]  @relation("TaskRelations")
}

model Comment {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  text   String
  posted DateTime

  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String
}

// model ChecklistItem {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt

//   text     String
//   complete Boolean @default(false)
//   position Int

//   task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
//   taskId String
// }

enum PriorityOption {
  LOWEST
  LOW
  MEDIUM
  HIGH
  HIGHEST
  // variation 2
  URGENT_AND_IMPORTANT
  URGENT
  IMPORTANT
}
